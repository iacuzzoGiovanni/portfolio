function q(){}function x(t,n){for(const e in n)t[e]=n[e];return t}function k(t){return t()}function M(){return Object.create(null)}function w(t){t.forEach(k)}function S(t){return typeof t=="function"}function z(t,n){return t!=t?n==n:t!==n||t&&typeof t=="object"||typeof t=="function"}function F(t){return Object.keys(t).length===0}function P(t,n,e,o){if(t){const r=m(t,n,e,o);return t[0](r)}}function m(t,n,e,o){return t[1]&&o?x(e.ctx.slice(),t[1](o(n))):e.ctx}function U(t,n,e,o){if(t[2]&&o){const r=t[2](o(e));if(n.dirty===void 0)return r;if(typeof r=="object"){const l=[],f=Math.max(n.dirty.length,r.length);for(let u=0;u<f;u+=1)l[u]=n.dirty[u]|r[u];return l}return n.dirty|r}return n.dirty}function A(t,n,e,o,r,l){if(r){const f=m(n,e,o,l);t.p(f,r)}}function B(t){if(t.ctx.length>32){const n=[],e=t.ctx.length/32;for(let o=0;o<e;o++)n[o]=-1;return n}return-1}function C(t){const n={};for(const e in t)e[0]!=="$"&&(n[e]=t[e]);return n}function D(t,n){const e={};n=new Set(n);for(const o in t)!n.has(o)&&o[0]!=="$"&&(e[o]=t[o]);return e}let i;function _(t){i=t}function y(){if(!i)throw new Error("Function called outside component initialization");return i}function G(t){y().$$.on_mount.push(t)}function H(t){y().$$.after_update.push(t)}const a=[],p=[];let s=[];const g=[],b=Promise.resolve();let d=!1;function j(){d||(d=!0,b.then(v))}function I(){return j(),b}function E(t){s.push(t)}const h=new Set;let c=0;function v(){if(c!==0)return;const t=i;do{try{for(;c<a.length;){const n=a[c];c++,_(n),O(n.$$)}}catch(n){throw a.length=0,c=0,n}for(_(null),a.length=0,c=0;p.length;)p.pop()();for(let n=0;n<s.length;n+=1){const e=s[n];h.has(e)||(h.add(e),e())}s.length=0}while(a.length);for(;g.length;)g.pop()();d=!1,h.clear(),_(t)}function O(t){if(t.fragment!==null){t.update(),w(t.before_update);const n=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,n),t.after_update.forEach(E)}}function J(t){const n=[],e=[];s.forEach(o=>t.indexOf(o)===-1?n.push(o):e.push(o)),e.forEach(o=>o()),s=n}export{H as a,p as b,P as c,U as d,x as e,D as f,B as g,C as h,M as i,v as j,S as k,F as l,E as m,q as n,G as o,J as p,i as q,w as r,z as s,I as t,A as u,_ as v,k as w,a as x,j as y};
